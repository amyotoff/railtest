import os
import logging
import requests
import openai

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ----- Функции для бизнес-логики -----

def get_bitcoin_price() -> str:
    """
    Возвращает стоимость биткоина (USD) используя CoinGecko API.
    """
    try:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        response = requests.get(url, timeout=5)
        data = response.json()
        return str(data["bitcoin"]["usd"])
    except Exception as e:
        logging.error(f"Ошибка получения цены биткоина: {e}")
        return "N/A"

def get_oil_price() -> str:
    """
    Возвращает «заглушку» для стоимости нефти.
    В реальном проекте интегрируйте реальный API для нефти.
    """
    return "70"

def generate_image(prompt: str) -> str:
    """
    Генерирует картинку через OpenAI (DALL·E).
    Возвращает URL картинки или сообщение об ошибке.
    """
    try:
        openai.api_key = os.environ.get("OPENAI_API_KEY", "")
        if not openai.api_key:
            return "Не указан OPENAI_API_KEY. Не могу нарисовать картинку."

        response = openai.Image.create(prompt=prompt, n=1, size="512x512")
        image_url = response["data"][0]["url"]
        return image_url
    except Exception as e:
        logging.error(f"Ошибка генерации изображения: {e}")
        return "Извини, не получилось нарисовать картинку."

def generate_chat_response(user_text: str) -> str:
    """
    Отправляет сообщение в OpenAI ChatCompletion и возвращает ответ.
    """
    openai.api_key = os.environ.get("OPENAI_API_KEY", "")
    if not openai.api_key:
        return "Не указан OPENAI_API_KEY. Не могу ответить через ChatGPT."

    system_prompt = (
        "Ты — AmyBot, молодой креативный профессионал, любишь спешалти кофе, "
        "гаджеты в стиле Apple и Teenage Engineering. Отвечай коротко, иногда с лёгкой иронией."
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",  # Замените на доступную вам модель
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text}
            ],
            temperature=0.1,
            max_tokens=250
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"Ошибка OpenAI ChatCompletion: {e}")
        return "Извини, я запнулся и не могу ответить."

# ----- Обработчики команд -----

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Приветствие при /start
    """
    await update.message.reply_text(
        "Привет! Я AmyBot.\n\n"
        "Могу:\n"
        
        "• Нарисовать картинку (используй 'AmyBot, нарисуй ...').\n"
        "• Пообщаться от лица AmyBot (все остальные сообщения).\n\n"
        
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Подсказка по /help
    """
    await update.message.reply_text(
        "Список возможностей:\n"
        
        "- 'AmyBot, нарисуй ...': я попытаюсь создать картинку.\n"
        
        "Команды:\n"
        "/start — начать\n"
        "/help — помощь"
    )

# ----- Основной обработчик сообщений -----

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Обработка всех текстовых сообщений, кроме команд.
    """
    user_text = update.message.text.strip()

    # 1) Если есть $ — отправляем цены
    if "$" in user_text:
        btc_price = get_bitcoin_price()
        oil_price = get_oil_price()
        reply_text = f"Биткоин: ${btc_price}\nНефть: ${oil_price} за баррель"
        await update.message.reply_text(reply_text)
        return

    # 2) Если начинается с "AmyBot, нарисуй"
    lower_text = user_text.lower()
    if lower_text.startswith("amybot, нарисуй"):
        prompt = user_text[len("AmyBot, нарисуй"):].strip()
        if not prompt:
            prompt = "что-нибудь красивое"
        image_result = generate_image(prompt)
        await update.message.reply_text(
            image_result if image_result.startswith("http") else image_result
        )
        return

    # 3) Иначе — используем ChatGPT
    chat_reply = generate_chat_response(user_text)
    await update.message.reply_text(chat_reply)

# ----- Запуск бота -----

def main():
    """
    Создаём и запускаем бота (polling).
    Для вебхука используйте run_webhook.
    """
    bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("Не найден TELEGRAM_BOT_TOKEN в переменных окружения.")

    # Создаём приложение
    application = ApplicationBuilder().token(bot_token).build()

    # Регистрируем команды
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))

    # Регистрируем обработчик любых текстовых сообщений (кроме команд)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)
    application.add_handler(text_handler)

    # Запускаем бота (долгоживущий процесс).
    application.run_polling()

if __name__ == "__main__":
    main()
